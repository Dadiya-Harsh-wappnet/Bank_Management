# -*- coding: utf-8 -*-
"""Bank Management.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VOBWJ3wraBIsAEdCapFY8K9ZHKqydsaR
"""

from abc import ABC, abstractmethod
from typing import final

class BankAccount(ABC):
    DEBIT_CARD_CHARGE_PER_YEAR: final = 500
    CREDIT_CARD_CHARGE_PER_YEAR: final = 1000
    INTEREST_RATE_ = 4
    """This is a bank management system..."""

    def __init__(self, name: str, balance: int, account_num: int, age: int):
        self.name = name
        self.__balance = balance
        self.account_num = account_num
        self.age = age

    @property
    def balance(self) -> int:
        return self.__balance

    @balance.setter
    def balance(self, amount: int) -> None:
        # Adding validation or custom logic in setter
        if amount < 0:
            raise ValueError("Balance cannot be negative")
        self.__balance = amount

    def isBalanceSufficient(self, amount) -> bool:
        return self.balance >= amount

    def isDepositedMoney(self, amount) -> bool:
        return amount > 0

    def annualInterestRate(self) -> float:
        return self.balance * self.INTEREST_RATE_ / 100

    def showBalance(self) -> None:
        print(f"Balance: {self.balance}")

    @abstractmethod
    def deposit(self, amount: int) -> None:
        pass

    @abstractmethod
    def withdraw(self, amount: int) -> None:
        pass

    @abstractmethod
    def transferMoney(self, amount: int, account) -> None:
        pass

    @abstractmethod
    def annualCharges(self) -> None:
        pass

class SavingAccount(BankAccount):
    def __init__(self, name: str, balance: int, account_num: int, age: int):
        super().__init__(name, balance, account_num, age)

    def showBalance(self) -> None:
        super().showBalance()

    def deposit(self, amount: int) -> None:
        if super().isDepositedMoney(amount):  # Check if the deposit amount is valid
            self.balance += amount  # Use the setter to update balance

    def withdraw(self, amount: int) -> None:
        if super().isBalanceSufficient(amount):  # Check if the balance is sufficient
            self.balance -= amount  # Use the setter to update balance

    def transferMoney(self, amount: int, account: BankAccount) -> None:
        if super().isBalanceSufficient(amount):  # Check if the balance is sufficient
            self.withdraw(amount)  # Use the withdraw method to deduct balance
            account.deposit(amount)  # Use the deposit method to add balance to the other account

    def annualCharges(self) -> str:
        return "No charges for the saving account."

class CreditAccount(BankAccount):
    def __init__(self, name: str, balance: int, account_num: int, age: int):
        super().__init__(name, balance, account_num, age)

    def showBalance(self) -> None:
        super().showBalance()

    def deposit(self, amount: int) -> None:
        if super().isDepositedMoney(amount):  # Check if the deposit amount is valid
            self.balance += amount  # Use the setter to update balance

    def withdraw(self, amount: int) -> None:
        if super().isBalanceSufficient(amount):  # Check if the balance is sufficient
            self.balance -= amount  # Use the setter to update balance

    def transferMoney(self, amount: int, account: BankAccount) -> None:
        if self.isBalanceSufficient(amount):  # Check if the balance is sufficient
            self.withdraw(amount)  # Use the withdraw method to deduct balance
            account.deposit(amount)  # Use the deposit method to add balance to the other account

    def annualCharges(self) -> int:
        return super().CREDIT_CARD_CHARGE_PER_YEAR + super().DEBIT_CARD_CHARGE_PER_YEAR



def main() -> None:
    harsh_savings = SavingAccount('Harsh', 15000, 9, 21)
    harsh_credit = CreditAccount('Harsh', 1500000, 7, 21)

    harsh_savings.showBalance()
    harsh_credit.showBalance()

    harsh_savings.deposit(10000)
    harsh_credit.deposit(100000)
    harsh_savings.showBalance()
    harsh_credit.showBalance()

    harsh_savings.transferMoney(1000, harsh_credit)

    harsh_savings.showBalance()
    harsh_credit.showBalance()

    harsh_credit.annualCharges()

    harsh_savings.annualCharges()

if __name__ == '__main__':
    main()

